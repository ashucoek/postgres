CREATE EXTENSION IF NOT EXISTS pg_tde;
SELECT pg_tde_add_key_provider_file('file-vault', '/tmp/change_key_provider_1.per');
1
SELECT pg_tde_list_all_key_providers();
(1,file-vault,file,"{""type"" : ""file"", ""path"" : ""/tmp/change_key_provider_1.per""}")
SELECT pg_tde_set_principal_key('test-key', 'file-vault');

CREATE TABLE test_enc (id serial, k integer, PRIMARY KEY (id)) USING tde_heap;
INSERT INTO test_enc (k) VALUES (5), (6);
SELECT pg_tde_verify_principal_key();

SELECT pg_tde_is_encrypted('test_enc');
t
SELECT * FROM test_enc ORDER BY id;
1|5
2|6
-- mv /tmp/change_key_provider_1.per /tmp/change_key_provider_2.per
SELECT pg_tde_change_key_provider_file('file-vault', '/tmp/change_key_provider_2.per');
1
SELECT pg_tde_list_all_key_providers();
(1,file-vault,file,"{""type"" : ""file"", ""path"" : ""/tmp/change_key_provider_2.per""}")
SELECT pg_tde_verify_principal_key();

SELECT pg_tde_is_encrypted('test_enc');
t
SELECT * FROM test_enc ORDER BY id;
1|5
2|6
-- server restart
SELECT pg_tde_verify_principal_key();

SELECT pg_tde_is_encrypted('test_enc');
t
SELECT * FROM test_enc ORDER BY id;
1|5
2|6
SELECT pg_tde_change_key_provider_file('file-vault', '/tmp/change_key_provider_3.per');
1
SELECT pg_tde_list_all_key_providers();
(1,file-vault,file,"{""type"" : ""file"", ""path"" : ""/tmp/change_key_provider_3.per""}")
SELECT pg_tde_verify_principal_key();
psql:<stdin>:1: ERROR:  failed to retrieve principal key test-key from keyring with ID 1
SELECT pg_tde_is_encrypted('test_enc');
t
SELECT * FROM test_enc ORDER BY id;
1|5
2|6
-- server restart
SELECT pg_tde_verify_principal_key();
psql:<stdin>:1: ERROR:  failed to retrieve principal key test-key from keyring with ID 1
SELECT pg_tde_is_encrypted('test_enc');
psql:<stdin>:1: ERROR:  failed to retrieve principal key test-key from keyring with ID 1
SELECT * FROM test_enc ORDER BY id;
psql:<stdin>:1: ERROR:  failed to retrieve principal key test-key from keyring with ID 1
-- mv /tmp/change_key_provider_2.per /tmp/change_key_provider_3.per
-- server restart
SELECT pg_tde_verify_principal_key();

SELECT pg_tde_is_encrypted('test_enc');
t
SELECT * FROM test_enc ORDER BY id;
1|5
2|6
DROP EXTENSION pg_tde CASCADE;
psql:<stdin>:1: NOTICE:  drop cascades to table test_enc
CREATE EXTENSION IF NOT EXISTS pg_tde;
SELECT pg_tde_add_key_provider_file('file-vault', '/tmp/change_key_provider_4.per');
1
0
CREATE TABLE test_enc (id serial, k integer, PRIMARY KEY (id)) USING tde_heap;
INSERT INTO test_enc (k) VALUES (5), (6);
SELECT pg_tde_verify_principal_key();

SELECT pg_tde_is_encrypted('test_enc');
t
SELECT * FROM test_enc ORDER BY id;
1|5
2|6
SELECT pg_tde_change_key_provider_file('file-vault', '/tmp/change_key_provider_3.per');
1
-- server restart
SELECT pg_tde_verify_principal_key();


SELECT pg_tde_is_encrypted('test_enc');
psql:<stdin>:1: ERROR:  Failed to decrypt key, incorrect principal key or corrupted key file
SELECT * FROM test_enc ORDER BY id;
psql:<stdin>:1: ERROR:  Failed to decrypt key, incorrect principal key or corrupted key file
SELECT pg_tde_change_key_provider_file('file-vault', '/tmp/change_key_provider_4.per');
1
-- server restart
SELECT pg_tde_verify_principal_key();

SELECT pg_tde_is_encrypted('test_enc');
t
SELECT * FROM test_enc ORDER BY id;
1|5
2|6
DROP EXTENSION pg_tde CASCADE;
psql:<stdin>:1: NOTICE:  drop cascades to table test_enc
