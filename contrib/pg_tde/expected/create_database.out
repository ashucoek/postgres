CREATE EXTENSION IF NOT EXISTS pg_tde;
CREATE DATABASE template_db;
SELECT current_database() AS regress_database
\gset
\c template_db
CREATE EXTENSION pg_tde;
SELECT pg_tde_add_database_key_provider_file('file-vault', '/tmp/template_provider.per');
 pg_tde_add_database_key_provider_file 
---------------------------------------
 
(1 row)

SELECT pg_tde_set_key_using_database_key_provider('test-db-key', 'file-vault');
 pg_tde_set_key_using_database_key_provider 
--------------------------------------------
 
(1 row)

CREATE TABLE test_enc (id serial PRIMARY KEY, x int) USING tde_heap;
CREATE TABLE test_plain (id serial PRIMARY KEY, x int) USING heap;
INSERT INTO test_enc (x) VALUES (10), (20);
INSERT INTO test_plain (x) VALUES (30), (40);
\c :regress_database
-- TODO: Test the case where we have no default key once we can delete default keys
--CREATE DATABASE new_db TEMPLATE template_db;
SELECT pg_tde_add_global_key_provider_file('global-file-vault','/tmp/template_provider_global.per');
 pg_tde_add_global_key_provider_file 
-------------------------------------
 
(1 row)

SELECT pg_tde_set_default_key_using_global_key_provider('default-key', 'global-file-vault');
 pg_tde_set_default_key_using_global_key_provider 
--------------------------------------------------
 
(1 row)

CREATE DATABASE new_db TEMPLATE template_db;
\c new_db
INSERT INTO test_enc (x) VALUES (25);
SELECT * FROM test_enc;
 id | x  
----+----
  1 | 10
  2 | 20
  3 | 25
(3 rows)

SELECT pg_tde_is_encrypted('test_enc');
 pg_tde_is_encrypted 
---------------------
 t
(1 row)

SELECT pg_tde_is_encrypted('test_enc_pkey');
 pg_tde_is_encrypted 
---------------------
 t
(1 row)

SELECT pg_tde_is_encrypted('test_enc_id_seq');
 pg_tde_is_encrypted 
---------------------
 t
(1 row)

INSERT INTO test_plain (x) VALUES (45);
SELECT * FROM test_plain;
 id | x  
----+----
  1 | 30
  2 | 40
  3 | 45
(3 rows)

SELECT pg_tde_is_encrypted('test_plain');
 pg_tde_is_encrypted 
---------------------
 f
(1 row)

SELECT pg_tde_is_encrypted('test_plain_pkey');
 pg_tde_is_encrypted 
---------------------
 f
(1 row)

SELECT pg_tde_is_encrypted('test_plain_id_seq');
 pg_tde_is_encrypted 
---------------------
 f
(1 row)

\c :regress_database
CREATE DATABASE new_db_file_copy TEMPLATE template_db STRATEGY FILE_COPY;
ERROR:  The FILE_COPY strategy cannot be used when there are encrypted objects in the template database: 3 objects found
HINT:  Use the WAL_LOG strategy instead.
\c template_db
DROP TABLE test_enc;
\c :regress_database
CREATE DATABASE new_db_file_copy TEMPLATE template_db STRATEGY FILE_COPY;
DROP DATABASE new_db_file_copy;
DROP DATABASE new_db;
DROP DATABASE template_db;
SELECT pg_tde_delete_default_key();
 pg_tde_delete_default_key 
---------------------------
 
(1 row)

SELECT pg_tde_delete_global_key_provider('global-file-vault');
 pg_tde_delete_global_key_provider 
-----------------------------------
 
(1 row)

DROP EXTENSION pg_tde;
