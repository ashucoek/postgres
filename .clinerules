# .clinerulesの目的
このファイルは「新規開発者が最初に知っておくべきルール・注意点・設計方針」および「プロジェクトの知見・ノウハウ・FAQ・議事録等のメモリバンク運用方針」を簡潔にまとめるものです。冗長な説明や重複は避け、必要最小限の情報のみ記載してください。

# Clineでのルール
 - ソースコード内のコメントは日本語で記載してください。
 - Clineでのやりとりも日本語で行ってください。
 - Clineの各タスクの最後に、タスクの振り返りを行い、次のタスクに活かすようにしてください。
   - 振り返りで明確になった情報は.clinerulesおよびmemory-bankディレクトリ内に反映・追記してください
 - 今利用しているモデルでは、画面の確認を行うとすぐにトークン数を超過してしまうので、よほど必要な場合を除いて、画面の確認は行わないようにしてください
 - .始まりのファイル（例: .storybookディレクトリなど）はグローバルのgitignoreで除かれる可能性があるので、必要なファイルは.gitignoreで「!」を使って明示的に管理対象に含めるようにしてください
 - memory-bank配下のファイル及び.clinerulesを編集する際は、上書きや内容消失がないよう、編集前にread_file等で現状内容を取得し、追記箇所を明示してください。
 - 重大な知見や運用上の注意点が発生した場合は、.clinerulesにも必ず反映してください。
 - ルール違反があった場合は、次回以降のタスクで必ず振り返りを行い、改善策を検討・実施すること

# プロジェクトの概要
 - このプロジェクトは公式のpostgresのリポジトリのforkです
  - 日本語版のADRを作成するために、公式のpostgresのリポジトリをforkして、そこに日本語版のADRを追加していく形で進めていきます
  - memory-bankを実質ADRとして利用する形で進めていきます
 - このプロジェクトは大変大きなプロジェクトです
  - そのため、memory-bankも構造化するなどして、情報を整理していく必要があります
  - その概要は memory_bank/README.md に記載しているので、そちらを参照してください

# 振り返りと今後の運用方針

- memory-bankはプロジェクトの知見や設計情報を体系的に整理・管理するための重要な資産です。  
- 分析手順や進捗管理は階層化されたタスク管理で行い、サブディレクトリ単位での進捗把握を可能にします。  
- docディレクトリやsrcディレクトリの主要サブディレクトリは優先的に分析し、タスクに反映します。  
- 実装ノートは必要に応じて作成し、設計方針や実装の深い理解を共有するためのドキュメントとして活用します。  
- 重大な知見や運用上の注意点は.clinerulesにも必ず反映し、プロジェクト全体で共有します。  
- 今後のタスクはこの振り返りを踏まえ、効率的かつ体系的に進めていきます。

# 振り返り（今回のタスクに関して）

- タスクの粒度や優先順位について、初期提案が粗すぎてユーザーの意図と合わず、詳細化や順序の見直しを何度も求められた。  
- docディレクトリの分析優先度を最初に提案できず、後から指摘を受けた。  
- タスクの階層化や進捗管理の方法について、初期段階で明確に示せず、ユーザーからの指摘で改善した。  
- 一気に進めるべきところを段階的に進めてしまい、ユーザーの要望に即応できなかった。  
- ファイル編集時にreplace_in_fileの検索ブロックが合わず失敗するケースがあり、write_to_fileに切り替える判断が遅れた。

# 再発防止策

- 初期段階でユーザーの要望やプロジェクトの規模感をより詳細にヒアリングし、計画を練る。  
- タスクの粒度や進捗管理方法について複数案を提示し、ユーザーと合意形成を図る。  
- 画面確認やファイル編集の失敗時は速やかにwrite_to_fileに切り替え、効率的に対応する。  
- ユーザーの「一気に進めてほしい」などの要望は優先的に反映し、柔軟に対応する。  
- 振り返り内容は.clinerulesやmemory-bankに必ず反映し、継続的に改善を図る。

# 分析方針（docディレクトリ分析を踏まえて）

- docディレクトリのドキュメントはSGML形式で構成され、Makefileで複数形式にビルド可能。  
- DocBookドキュメントのリンク設計や文字コードの扱いに関するルールを遵守する。  
- バグ・未実装機能・TODOは外部Wikiで一元管理されていることを認識する。  
- doc/src/sgml内の全ファイルを一度は内容確認し、どのファイルにどのような内容が記載されているかをmemory-bankに体系的に蓄積する。  
- 設計方針、アーキテクチャ、実装ノートなど重要なテーマは特に詳細に整理し、知見として反映する。  
- 分析結果は逐次memory-bankに反映し、知見の共有と効率的な参照を可能にする。

# タスク管理ルールの明文化

- タスクを開始する際は、必ずtasks.mdの該当タスクのステータスを「未着手」から「着手中」に変更すること。  
- タスクが完了したら、ステータスを「着手中」から「完了」または「完了済み」に変更すること。  
- タスクの進捗状況は常に最新の状態に保ち、関係者が把握しやすいように管理すること。  
- タスクの中でさらに細かい作業や分析項目が発生した場合は、親タスクの下に階層的にサブタスクを追加し、同様にステータス管理を行うこと。  
- これらのルールは.clinerulesおよびmemory-bank/analysis/tasks.mdの冒頭に明記し、全員が遵守すること。  
- タスク管理のルール違反や見落としがあった場合は、必ず振り返りを行い、改善策を.clinerulesに追記すること。  
- タスク管理の透明性と正確性を保つことで、プロジェクト全体の効率的な進行を支援する。

# 再発防止策（分析の徹底とルール整備）

- タスク001のように見落としが多い場合は、必ず全ファイルの内容を一通り確認し、分析漏れを防ぐ。  
- 分析方針や手順を.clinerulesおよびmemory-bankに明文化し、誰もが徹底できるようにする。  
- 分析途中で次のタスクに進む前に、現状の分析が本当に完了しているかを必ず確認する。  
- ルール違反や見落としが発生した場合は、必ず振り返りを行い、改善策を.clinerulesに追記する。  
- これらのルールを守ることで、同様の問題を二度と起こさない体制を構築する。

# 追加の運用ルール

- タスクの着手・完了時には必ずtasks.mdのステータスを適切に更新すること。  
- タスクの中で細かい作業や分析項目が発生した場合は、親タスクの下に階層的にサブタスクを追加し、同様にステータス管理を行うこと。  
- タスク開始・完了時に実施するチェックリストを導入し、ステータス更新漏れや管理ミスを防止すること。  
- 分析対象のファイルは必ず全件一通り内容を確認し、どのファイルにどのような内容があるかを体系的にmemory-bankに蓄積すること。  
- 重要なテーマ（設計方針、アーキテクチャ、実装ノートなど）は特に詳細に整理し、知見として反映すること。  
- 分析途中で次のタスクに進む前に、現状の分析が本当に完了しているかを必ず確認すること。  
- ルール違反や見落としがあった場合は必ず振り返りを行い、改善策をclinerulesに追記すること。  
- 画面確認はトークン数制限の関係で必要最小限にし、効率的に進めること。  
- .始まりのファイルは.gitignoreで明示的に管理対象に含めること。
